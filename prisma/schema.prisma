generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model amenity {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @db.VarChar(255)
  type        String    @db.VarChar(255)
  location_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  location    location? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model location {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String         @db.VarChar(255)
  user_id      String?        @db.Uuid
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  amenity      amenity[]
  user         user?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  traffic_info traffic_info[]
}

model provider {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model traffic_info {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  traffic_status      String    @db.VarChar(255)
  alternative_route   String?   @db.VarChar(255)
  expected_clear_time DateTime? @db.Timestamp(6)
  cause               String?   @db.VarChar(255)
  location_id         String?   @db.Uuid
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @db.Timestamp(6)
  location            location? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  location    location[]
  provider    provider[]
}
